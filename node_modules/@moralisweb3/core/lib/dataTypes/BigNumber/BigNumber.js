"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigNumber = void 0;
var BigNumberFormatter_1 = require("./BigNumberFormatter");
var BigNumberParser_1 = require("./BigNumberParser");
var BigNumber = /** @class */ (function () {
    function BigNumber(value) {
        this.value = value;
    }
    BigNumber.create = function (value) {
        if (value instanceof BigNumber) {
            return value;
        }
        return new BigNumber(BigNumberParser_1.BigNumberParser.parseInt(value));
    };
    BigNumber.fromDecimal = function (value, decimals) {
        if (decimals === void 0) { decimals = 0; }
        return new BigNumber(BigNumberParser_1.BigNumberParser.parseDecimal(value, decimals));
    };
    BigNumber.prototype.toBigInt = function () {
        return this.value;
    };
    BigNumber.prototype.add = function (value) {
        return new BigNumber(this.value + asBigInt(value));
    };
    BigNumber.prototype.sub = function (value) {
        return new BigNumber(this.value - asBigInt(value));
    };
    BigNumber.prototype.mul = function (value) {
        return new BigNumber(this.value * asBigInt(value));
    };
    BigNumber.prototype.div = function (value) {
        return new BigNumber(this.value / asBigInt(value));
    };
    BigNumber.prototype.equals = function (value) {
        return this.value === value.toBigInt();
    };
    BigNumber.prototype.toDecimal = function (decimals) {
        return BigNumberFormatter_1.BigNumberFormatter.toDecimal(this.value, decimals);
    };
    BigNumber.prototype.toString = function () {
        return this.value.toString();
    };
    BigNumber.prototype.toHex = function () {
        return BigNumberFormatter_1.BigNumberFormatter.toHex(this.value);
    };
    BigNumber.prototype.toJSON = function () {
        return this.toHex();
    };
    return BigNumber;
}());
exports.BigNumber = BigNumber;
function asBigInt(value) {
    return BigNumber.create(value).toBigInt();
}
//# sourceMappingURL=BigNumber.js.map