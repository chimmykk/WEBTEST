declare type CamelCase<S extends string> = S extends `${infer P1}_${infer P2}${infer P3}` ? `${P1}${Uppercase<P2>}${CamelCase<P3>}` : S;
export declare type Camelize<T> = {
    [K in keyof T as CamelCase<string & K>]: T[K] extends Array<infer U> ? U extends {} ? Array<Camelize<U>> : T[K] : T[K] extends {} ? Camelize<T[K]> : T[K];
};
export declare const toCamelCase: <Data extends object>(data: Data) => Camelize<Data>;
export {};
//# sourceMappingURL=toCamelCase.d.ts.map