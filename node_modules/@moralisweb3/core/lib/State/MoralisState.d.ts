import { StateMachine, EventObject, Typestate } from '@xstate/fsm';
export declare type InitEvent = {
    type: 'xstate.init';
};
export declare class MoralisState<StateContext extends object, StateEvent extends EventObject, State extends Typestate<StateContext>> {
    readonly name: string;
    private value;
    constructor(name: string);
    private get isStarted();
    private assertStarted;
    start(_config: StateMachine.Config<StateContext, StateEvent, State>): {
        config: StateMachine.Config<StateContext, StateEvent, State>;
        machine: StateMachine.Machine<StateContext, StateEvent, State>;
        service: StateMachine.Service<StateContext, StateEvent, State>;
    };
    get state(): StateMachine.State<StateContext, StateEvent, State>;
    get machine(): StateMachine.Machine<StateContext, StateEvent, State>;
    get service(): StateMachine.Service<StateContext, StateEvent, State>;
    match(value: State['value']): boolean;
    can(event: StateEvent['type']): boolean | undefined;
    transition(event: StateEvent): void;
}
//# sourceMappingURL=MoralisState.d.ts.map