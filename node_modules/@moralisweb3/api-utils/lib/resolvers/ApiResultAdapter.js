"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiResultAdapter = exports.ApiFormatType = void 0;
var core_1 = require("@moralisweb3/core");
// TODO: make part of core config? The challenge in that case is to make sure it is Typed correctly
var ApiFormatType;
(function (ApiFormatType) {
    // Return the data directly, as is provided by the API
    ApiFormatType["RAW"] = "raw";
    // Return the formatted result of all moralis DataTypes
    ApiFormatType["JSON"] = "JSON";
    // Return class with moralis DataTypes and format functions
    ApiFormatType["NORMAL"] = "normal";
})(ApiFormatType = exports.ApiFormatType || (exports.ApiFormatType = {}));
var ApiResultAdapter = /** @class */ (function () {
    function ApiResultAdapter(data, adapter, jsonAdapter, params) {
        this._data = data;
        this._adapter = adapter;
        this._jsonAdapter = jsonAdapter;
        this._params = params;
    }
    Object.defineProperty(ApiResultAdapter.prototype, "raw", {
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiResultAdapter.prototype, "result", {
        get: function () {
            return this._adapter(this._data, this._params);
        },
        enumerable: false,
        configurable: true
    });
    // TODO:  Cast all to primitive types
    ApiResultAdapter.prototype.toJSON = function () {
        return this._jsonAdapter(this.result);
    };
    ApiResultAdapter.prototype.format = function (formatType) {
        if (formatType === ApiFormatType.RAW) {
            return this.raw;
        }
        if (formatType === ApiFormatType.JSON) {
            return this.toJSON();
        }
        if (formatType === ApiFormatType.NORMAL) {
            return this.result;
        }
        throw new core_1.MoralisApiError({
            code: core_1.ApiErrorCode.GENERIC_API_ERROR,
            message: 'provided formatType not supported',
        });
    };
    return ApiResultAdapter;
}());
exports.ApiResultAdapter = ApiResultAdapter;
//# sourceMappingURL=ApiResultAdapter.js.map