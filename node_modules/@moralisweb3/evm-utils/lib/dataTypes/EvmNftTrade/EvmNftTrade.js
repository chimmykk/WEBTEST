"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmNftTrade = void 0;
var core_1 = require("@moralisweb3/core");
var EvmAddress_1 = require("../EvmAddress");
var EvmChain_1 = require("../EvmChain");
var EvmNative_1 = require("../EvmNative");
var EvmNftTrade = /** @class */ (function () {
    function EvmNftTrade(data) {
        this._data = EvmNftTrade.parse(data);
    }
    EvmNftTrade.create = function (data) {
        if (data instanceof EvmNftTrade) {
            return data;
        }
        return new EvmNftTrade(data);
    };
    EvmNftTrade.equals = function (dataA, dataB) {
        var transactionA = EvmNftTrade.create(dataA);
        var transactionB = EvmNftTrade.create(dataB);
        if (!transactionA._data.chain.equals(transactionB._data.chain)) {
            return false;
        }
        if (!transactionA._data.blockNumber.equals(transactionB._data.blockNumber)) {
            return false;
        }
        if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {
            return false;
        }
        if (transactionA._data.transactionIndex !== transactionB._data.transactionIndex) {
            return false;
        }
        return true;
    };
    EvmNftTrade.prototype.equals = function (data) {
        return EvmNftTrade.equals(this, data);
    };
    EvmNftTrade.prototype.toJSON = function () {
        var data = this._data;
        return __assign(__assign({}, data), { chain: data.chain.format(), sellerAddress: data.sellerAddress.format(), buyerAddress: data.buyerAddress.format(), marketplaceAddress: data.marketplaceAddress.format(), tokenAddress: data.tokenAddress.format(), priceTokenAddress: data.priceTokenAddress ? data.priceTokenAddress.format() : undefined, blockNumber: data.blockNumber.toString(), price: data.price.toString() });
    };
    EvmNftTrade.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmNftTrade.prototype, "result", {
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    EvmNftTrade.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain), sellerAddress: EvmAddress_1.EvmAddress.create(data.sellerAddress), buyerAddress: EvmAddress_1.EvmAddress.create(data.buyerAddress), marketplaceAddress: EvmAddress_1.EvmAddress.create(data.marketplaceAddress), tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress), priceTokenAddress: (0, core_1.maybe)(data.priceTokenAddress, EvmAddress_1.EvmAddress.create), blockNumber: core_1.BigNumber.create(data.blockNumber), price: EvmNative_1.EvmNative.create(data.price), transactionIndex: +data.transactionIndex })); };
    return EvmNftTrade;
}());
exports.EvmNftTrade = EvmNftTrade;
//# sourceMappingURL=EvmNftTrade.js.map