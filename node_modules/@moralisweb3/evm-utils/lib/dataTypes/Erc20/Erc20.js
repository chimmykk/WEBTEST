"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Erc20Token = void 0;
var core_1 = require("@moralisweb3/core");
var EvmAddress_1 = require("../EvmAddress");
var EvmChain_1 = require("../EvmChain");
/**
 * The Erc20Token class is a MoralisData that references to a Erc20 Token
 * It holds data about the data and metadata of an Erc20 token
 */
var Erc20Token = /** @class */ (function () {
    function Erc20Token(value) {
        this._value = Erc20Token.parse(value);
    }
    Erc20Token.create = function (value) {
        if (value instanceof Erc20Token) {
            return value;
        }
        return new Erc20Token(value);
    };
    Erc20Token.equals = function (valueA, valueB) {
        var erc20A = Erc20Token.create(valueA);
        var erc20B = Erc20Token.create(valueB);
        if (!erc20A._value.chain.equals(erc20B._value.chain)) {
            return false;
        }
        if (!erc20A._value.contractAddress.equals(erc20B._value.contractAddress)) {
            return false;
        }
        return true;
    };
    Object.defineProperty(Erc20Token.prototype, "decimals", {
        get: function () {
            return this._value.decimals;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "name", {
        get: function () {
            return this._value.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "symbol", {
        get: function () {
            return this._value.symbol;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "contractAddress", {
        get: function () {
            return this._value.contractAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "chain", {
        get: function () {
            return this._value.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "logo", {
        get: function () {
            return this._value.logo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "logoHash", {
        get: function () {
            return this._value.logoHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "thumbnail", {
        get: function () {
            return this._value.thumbnail;
        },
        enumerable: false,
        configurable: true
    });
    Erc20Token.prototype.equals = function (value) {
        return Erc20Token.equals(this, value);
    };
    Erc20Token.prototype.toJSON = function () {
        var value = this._value;
        return __assign(__assign({}, value), { contractAddress: value.contractAddress.format(), chain: value.chain.format() });
    };
    Erc20Token.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(Erc20Token.prototype, "result", {
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Erc20Token.parse = function (value) { return ({
        decimals: (0, core_1.maybe)(value.decimals, function (value) { return +value; }),
        name: value.name,
        symbol: value.symbol,
        contractAddress: EvmAddress_1.EvmAddress.create(value.contractAddress),
        logo: (0, core_1.maybe)(value.logo),
        logoHash: (0, core_1.maybe)(value.logoHash),
        thumbnail: (0, core_1.maybe)(value.thumbnail),
        chain: EvmChain_1.EvmChain.create(value.chain),
    }); };
    return Erc20Token;
}());
exports.Erc20Token = Erc20Token;
//# sourceMappingURL=Erc20.js.map