import { MoralisDataObject, MoralisDataObjectValue } from '@moralisweb3/core';
import { EvmNftData, EvmNftInput } from './types';
export declare type EvmNftish = EvmNftInput | EvmNft;
/**
 * The EvmNft class is a MoralisData that references to a the NFT of the type; Erc721 or Erc1155
 */
export declare class EvmNft implements MoralisDataObject {
    private _data;
    constructor(data: EvmNftInput);
    static parse: (data: EvmNftInput) => EvmNftData;
    private static validateMetadata;
    static create(value: EvmNftish): EvmNft;
    static equals(valueA: EvmNftish, valueB: EvmNftish): boolean;
    equals(value: EvmNftish): boolean;
    toJSON(): {
        tokenAddress: string;
        chain: string | number;
        ownerOf: string | undefined;
        blockNumberMinted: string | undefined;
        blockNumber: string | undefined;
        tokenId: string | number;
        contractType: import("../EvmNftContractType").EvmNftContractType;
        tokenUri?: string | undefined;
        tokenHash?: string | undefined;
        metadata: MoralisDataObjectValue;
        name?: string | undefined;
        symbol?: string | undefined;
        lastMetadataSync?: Date | undefined;
        lastTokenUriSync?: Date | undefined;
        amount?: number | undefined;
    };
    format(): {
        tokenAddress: string;
        chain: string | number;
        ownerOf: string | undefined;
        blockNumberMinted: string | undefined;
        blockNumber: string | undefined;
        tokenId: string | number;
        contractType: import("../EvmNftContractType").EvmNftContractType;
        tokenUri?: string | undefined;
        tokenHash?: string | undefined;
        metadata: MoralisDataObjectValue;
        name?: string | undefined;
        symbol?: string | undefined;
        lastMetadataSync?: Date | undefined;
        lastTokenUriSync?: Date | undefined;
        amount?: number | undefined;
    };
    get result(): EvmNftData;
}
//# sourceMappingURL=EvmNft.d.ts.map