"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmNft = void 0;
var core_1 = require("@moralisweb3/core");
var EvmAddress_1 = require("../EvmAddress");
var EvmChain_1 = require("../EvmChain");
var EvmNftContractType_1 = require("../EvmNftContractType");
/**
 * The EvmNft class is a MoralisData that references to a the NFT of the type; Erc721 or Erc1155
 */
var EvmNft = /** @class */ (function () {
    function EvmNft(data) {
        this._data = EvmNft.parse(data);
    }
    EvmNft.create = function (value) {
        if (value instanceof EvmNft) {
            return value;
        }
        return new EvmNft(value);
    };
    EvmNft.equals = function (valueA, valueB) {
        var nftA = EvmNft.create(valueA);
        var nftB = EvmNft.create(valueB);
        if (!nftA._data.chain.equals(nftB._data.chain)) {
            return false;
        }
        if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {
            return false;
        }
        // Owners are different between tokens
        if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {
            return false;
        }
        // Owner is defined in only one token
        if ((nftA._data.ownerOf && !nftB._data.ownerOf) || (!nftA._data.ownerOf && nftB._data.ownerOf)) {
            return false;
        }
        return true;
    };
    EvmNft.prototype.equals = function (value) {
        return EvmNft.equals(this, value);
    };
    EvmNft.prototype.toJSON = function () {
        var _b, _c, _d;
        var data = this._data;
        return __assign(__assign({}, data), { tokenAddress: data.tokenAddress.format(), chain: data.chain.format(), ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.format(), blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(), blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString() });
    };
    EvmNft.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmNft.prototype, "result", {
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    var _a;
    _a = EvmNft;
    EvmNft.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain), contractType: (0, EvmNftContractType_1.validateValidEvmContractType)(data.contractType), tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress), metadata: (0, core_1.maybe)(data.metadata, _a.validateMetadata), tokenUri: (0, core_1.maybe)(data.tokenUri), tokenHash: (0, core_1.maybe)(data.tokenHash), name: (0, core_1.maybe)(data.name), symbol: (0, core_1.maybe)(data.symbol), ownerOf: (0, core_1.maybe)(data.ownerOf, EvmAddress_1.EvmAddress.create), blockNumberMinted: (0, core_1.maybe)(data.blockNumberMinted, core_1.BigNumber.create), blockNumber: (0, core_1.maybe)(data.blockNumber, core_1.BigNumber.create), lastMetadataSync: (0, core_1.maybe)(data.lastMetadataSync, core_1.dateInputToDate), lastTokenUriSync: (0, core_1.maybe)(data.lastTokenUriSync, core_1.dateInputToDate), amount: (0, core_1.maybe)(data.amount, function (value) { return +value; }) })); };
    EvmNft.validateMetadata = function (value) {
        try {
            return JSON.parse(value);
        }
        catch (error) {
            throw new core_1.MoralisCoreError({
                code: core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: 'Invalid metadata provided, cannot parse the value to JSON',
            });
        }
    };
    return EvmNft;
}());
exports.EvmNft = EvmNft;
//# sourceMappingURL=EvmNft.js.map