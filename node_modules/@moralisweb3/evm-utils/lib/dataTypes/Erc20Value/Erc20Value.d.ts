import { BigNumber, BigNumberish, MoralisData } from '@moralisweb3/core';
import { Erc20Token, Erc20Tokenish } from '../Erc20/Erc20';
export declare type Erc20ValueInputAmount = BigNumberish;
export declare type Erc20ValueInputDecimals = number | string;
export declare type Erc20Valueish = Erc20ValueInputAmount | Erc20Value;
export declare type Erc20ValueData = {
    amount: BigNumber;
    decimals: number;
};
export declare type Erc20Options = {
    decimals?: Erc20ValueInputDecimals;
    token?: Erc20Tokenish;
};
/**
 * The Erc20Value class is a MoralisData that references to a the value of an Erc20Token
 * It holds data about the data about the amount of tokens and the number of decimals.
 */
export declare class Erc20Value implements MoralisData {
    private _value;
    private _token?;
    constructor(amount: Erc20ValueInputAmount, options?: Erc20Options);
    static parse: ({ amount, decimals, token, }: {
        amount: Erc20ValueInputAmount;
        decimals: Erc20ValueInputDecimals;
        token?: Erc20Tokenish | undefined;
    }) => Erc20ValueData;
    static create(value: Erc20Valueish, options?: Erc20Options): Erc20Value;
    static equals(valueA: Erc20Valueish, valueB: Erc20Valueish): boolean;
    equals(value: Erc20Valueish): boolean;
    get decimals(): number;
    get amount(): BigNumber;
    get value(): string;
    get token(): Erc20Token | null;
    toNumber(): number;
    toString(): string;
    display: () => string;
    format(): string;
    toJSON(): {
        value: string;
        token: {
            contractAddress: string;
            chain: string | number;
            decimals: number;
            name: string;
            symbol: string;
            logo?: string | null | undefined;
            logoHash?: string | null | undefined;
            thumbnail?: string | null | undefined;
        };
    } | {
        value: string;
        token?: undefined;
    };
}
//# sourceMappingURL=Erc20Value.d.ts.map