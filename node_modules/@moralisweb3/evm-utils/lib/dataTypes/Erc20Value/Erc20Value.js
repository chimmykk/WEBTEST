"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Erc20Value = void 0;
var core_1 = require("@moralisweb3/core");
var Erc20_1 = require("../Erc20/Erc20");
var EVM_ERC20_DEFAULT_DECIMALS = 18;
/**
 * The Erc20Value class is a MoralisData that references to a the value of an Erc20Token
 * It holds data about the data about the amount of tokens and the number of decimals.
 */
var Erc20Value = /** @class */ (function () {
    function Erc20Value(amount, options) {
        var _this = this;
        var _a, _b, _c;
        this.display = function () {
            if (!_this._token) {
                return "".concat(_this.value);
            }
            return "".concat(_this.value, " ").concat(_this._token.symbol);
        };
        this._value = Erc20Value.parse({
            amount: amount,
            decimals: (_c = (_a = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a !== void 0 ? _a : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,
            token: options === null || options === void 0 ? void 0 : options.token,
        });
        if (options === null || options === void 0 ? void 0 : options.token) {
            this._token = Erc20_1.Erc20Token.create(options.token);
        }
    }
    Erc20Value.create = function (value, options) {
        if (value instanceof Erc20Value) {
            return value;
        }
        return new Erc20Value(value, options);
    };
    Erc20Value.equals = function (valueA, valueB) {
        var erc20ValueA = Erc20Value.create(valueA);
        var erc20ValueB = Erc20Value.create(valueB);
        return erc20ValueA.value === erc20ValueB.value;
    };
    Erc20Value.prototype.equals = function (value) {
        return Erc20Value.equals(this, value);
    };
    Object.defineProperty(Erc20Value.prototype, "decimals", {
        get: function () {
            return this._value.decimals;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Value.prototype, "amount", {
        get: function () {
            return this._value.amount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Value.prototype, "value", {
        get: function () {
            return this._value.amount.toDecimal(this.decimals);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Value.prototype, "token", {
        get: function () {
            var _a;
            return (_a = this._token) !== null && _a !== void 0 ? _a : null;
        },
        enumerable: false,
        configurable: true
    });
    Erc20Value.prototype.toNumber = function () {
        return +this.value;
    };
    Erc20Value.prototype.toString = function () {
        return this.value;
    };
    Erc20Value.prototype.format = function () {
        return this.toString();
    };
    Erc20Value.prototype.toJSON = function () {
        if (this.token) {
            return { value: this.value, token: this.token.toJSON() };
        }
        return { value: this.value };
    };
    Erc20Value.parse = function (_a) {
        var amount = _a.amount, decimals = _a.decimals, token = _a.token;
        if (token && token.decimals && +token.decimals !== +decimals) {
            throw new core_1.MoralisCoreError({
                code: core_1.CoreErrorCode.INVALID_DATA,
                message: 'Decimals do not match',
            });
        }
        return {
            amount: core_1.BigNumber.create(amount),
            decimals: +decimals,
        };
    };
    return Erc20Value;
}());
exports.Erc20Value = Erc20Value;
//# sourceMappingURL=Erc20Value.js.map