import { MoralisDataObject } from '@moralisweb3/core';
import { EvmBlockInput, EvmBlockData } from './types';
export declare type EvmBlockish = EvmBlockInput | EvmBlock;
export declare class EvmBlock implements MoralisDataObject {
    private _data;
    constructor(data: EvmBlockInput);
    static parse: (data: EvmBlockInput) => EvmBlockData;
    static create(data: EvmBlockish): EvmBlock;
    static equals(dataA: EvmBlockish, dataB: EvmBlockish): boolean;
    equals(data: EvmBlockish): boolean;
    toJSON(): {
        number: string;
        difficulty: string;
        totalDifficulty: string;
        size: string;
        gasLimit: string;
        gasUsed: string;
        chain: string | number;
        miner: string;
        transactions: {
            to: string | undefined;
            from: string;
            nonce: string | undefined;
            gas: string | undefined;
            gasPrice: string;
            gasUsed: string;
            cumulativeGasUsed: string;
            blockNumber: string;
            value: string | undefined;
            chain: string | number;
            contractAddress: string | undefined;
            logs: {
                address: string;
                logIndex?: number | undefined;
                transactionHash: string;
                transactionIndex?: number | undefined;
                data: string;
                topics: string[];
                blockHash: string;
                blockNumber: number;
                blockTimestamp?: string | undefined;
            }[];
            data?: string | undefined;
            hash: string;
            type?: number | undefined;
            index: number;
            blockHash: string;
            blockTimestamp: Date;
            receiptRoot?: string | undefined;
            receiptStatus?: number | undefined;
        }[];
        timestamp: Date;
        hash: string;
        parentHash: string;
        nonce: string;
        sha3Uncles: string;
        logsBloom: string;
        transactionsRoot: string;
        stateRoot: string;
        receiptsRoot: string;
        extraData: string;
        transactionCount: number;
    };
    format(): {
        number: string;
        difficulty: string;
        totalDifficulty: string;
        size: string;
        gasLimit: string;
        gasUsed: string;
        chain: string | number;
        miner: string;
        transactions: {
            to: string | undefined;
            from: string;
            nonce: string | undefined;
            gas: string | undefined;
            gasPrice: string;
            gasUsed: string;
            cumulativeGasUsed: string;
            blockNumber: string;
            value: string | undefined;
            chain: string | number;
            contractAddress: string | undefined;
            logs: {
                address: string;
                logIndex?: number | undefined;
                transactionHash: string;
                transactionIndex?: number | undefined;
                data: string;
                topics: string[];
                blockHash: string;
                blockNumber: number;
                blockTimestamp?: string | undefined;
            }[];
            data?: string | undefined;
            hash: string;
            type?: number | undefined;
            index: number;
            blockHash: string;
            blockTimestamp: Date;
            receiptRoot?: string | undefined;
            receiptStatus?: number | undefined;
        }[];
        timestamp: Date;
        hash: string;
        parentHash: string;
        nonce: string;
        sha3Uncles: string;
        logsBloom: string;
        transactionsRoot: string;
        stateRoot: string;
        receiptsRoot: string;
        extraData: string;
        transactionCount: number;
    };
    get result(): EvmBlockData;
}
//# sourceMappingURL=EvmBlock.d.ts.map