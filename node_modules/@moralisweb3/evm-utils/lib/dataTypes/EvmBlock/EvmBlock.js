"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmBlock = void 0;
var core_1 = require("@moralisweb3/core");
var EvmAddress_1 = require("../EvmAddress");
var EvmChain_1 = require("../EvmChain");
var EvmTransaction_1 = require("../EvmTransaction");
var EvmBlock = /** @class */ (function () {
    function EvmBlock(data) {
        this._data = EvmBlock.parse(data);
    }
    EvmBlock.create = function (data) {
        if (data instanceof EvmBlock) {
            return data;
        }
        return new EvmBlock(data);
    };
    EvmBlock.equals = function (dataA, dataB) {
        var blockA = EvmBlock.create(dataA);
        var blockB = EvmBlock.create(dataB);
        if (!blockA._data.chain.equals(blockB._data.chain)) {
            return false;
        }
        if (blockA._data.hash !== blockB._data.hash) {
            return false;
        }
        return true;
    };
    EvmBlock.prototype.equals = function (data) {
        return EvmBlock.equals(this, data);
    };
    EvmBlock.prototype.toJSON = function () {
        var data = this._data;
        return __assign(__assign({}, data), { number: data.number.toString(), difficulty: data.difficulty.toString(), totalDifficulty: data.totalDifficulty.toString(), size: data.size.toString(), gasLimit: data.gasLimit.toString(), gasUsed: data.gasUsed.toString(), chain: data.chain.format(), miner: data.miner.format(), transactions: data.transactions.map(function (transaction) { return transaction.toJSON(); }) });
    };
    EvmBlock.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmBlock.prototype, "result", {
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    EvmBlock.parse = function (data) { return (__assign(__assign({}, data), { miner: EvmAddress_1.EvmAddress.create(data.miner), timestamp: (0, core_1.dateInputToDate)(data.timestamp), number: core_1.BigNumber.create(data.number), difficulty: core_1.BigNumber.create(data.difficulty), totalDifficulty: core_1.BigNumber.create(data.totalDifficulty), size: core_1.BigNumber.create(data.size), gasLimit: core_1.BigNumber.create(data.gasLimit), gasUsed: core_1.BigNumber.create(data.gasUsed), transactions: data.transactions.map(EvmTransaction_1.EvmTransaction.create), chain: EvmChain_1.EvmChain.create(data.chain), transactionCount: +data.transactionCount })); };
    return EvmBlock;
}());
exports.EvmBlock = EvmBlock;
//# sourceMappingURL=EvmBlock.js.map