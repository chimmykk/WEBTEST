"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Erc20Transfer = void 0;
var core_1 = require("@moralisweb3/core");
var EvmAddress_1 = require("../EvmAddress");
var EvmChain_1 = require("../EvmChain");
var Erc20Transfer = /** @class */ (function () {
    function Erc20Transfer(data) {
        this._data = Erc20Transfer.parse(data);
    }
    Object.defineProperty(Erc20Transfer.prototype, "address", {
        get: function () {
            return this._data.address;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Transfer.prototype, "blockHash", {
        get: function () {
            return this._data.blockHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Transfer.prototype, "blockNumber", {
        get: function () {
            return this._data.blockNumber;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Transfer.prototype, "blockTimestamp", {
        get: function () {
            return this._data.blockTimestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Transfer.prototype, "chain", {
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Transfer.prototype, "fromAddress", {
        get: function () {
            return this._data.fromAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Transfer.prototype, "toAddress", {
        get: function () {
            return this._data.toAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Transfer.prototype, "transactionHash", {
        get: function () {
            return this._data.transactionHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Erc20Transfer.prototype, "value", {
        get: function () {
            return this._data.value;
        },
        enumerable: false,
        configurable: true
    });
    Erc20Transfer.create = function (data) {
        if (data instanceof Erc20Transfer) {
            return data;
        }
        return new Erc20Transfer(data);
    };
    Erc20Transfer.equals = function (dataA, dataB) {
        var tokenA = Erc20Transfer.create(dataA);
        var tokenB = Erc20Transfer.create(dataB);
        return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());
    };
    Erc20Transfer.prototype.equals = function (data) {
        return Erc20Transfer.equals(this, data);
    };
    Erc20Transfer.prototype.toJSON = function () {
        var data = this._data;
        return __assign(__assign({}, data), { chain: data.chain.format(), address: data.address.format(), blockNumber: data.blockNumber.toString(), toAddress: data.toAddress.format(), fromAddress: data.fromAddress.format(), value: data.value.toString() });
    };
    Erc20Transfer.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(Erc20Transfer.prototype, "result", {
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    Erc20Transfer.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain), address: EvmAddress_1.EvmAddress.create(data.address), blockTimestamp: (0, core_1.dateInputToDate)(data.blockTimestamp), blockNumber: core_1.BigNumber.create(data.blockNumber), toAddress: EvmAddress_1.EvmAddress.create(data.toAddress), fromAddress: EvmAddress_1.EvmAddress.create(data.fromAddress), value: core_1.BigNumber.create(data.value) })); };
    return Erc20Transfer;
}());
exports.Erc20Transfer = Erc20Transfer;
//# sourceMappingURL=Erc20Transfer.js.map