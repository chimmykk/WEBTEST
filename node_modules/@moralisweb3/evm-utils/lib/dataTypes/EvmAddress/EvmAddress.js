"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmAddress = void 0;
var core_1 = require("@moralisweb3/core");
var address_1 = require("@ethersproject/address");
var EvmUtilsConfig_1 = require("../../config/EvmUtilsConfig");
/**
 * The EvmAddress class is a MoralisData that references to a EVM address
 * A new instance can be created via `EvmAddress.create(address)`, where the provided chain can be a valid address (in lowercase or checksum)
 */
var EvmAddress = /** @class */ (function () {
    function EvmAddress(address, config) {
        this.config = config;
        this._value = EvmAddress.parse(address);
    }
    EvmAddress.create = function (address, core) {
        if (address instanceof EvmAddress) {
            return address;
        }
        var finalCore = core || core_1.MoralisCoreProvider.getDefault();
        return new EvmAddress(address, finalCore.config);
    };
    Object.defineProperty(EvmAddress, "ZERO_ADDRESS", {
        get: function () {
            return EvmAddress.create('0x0000000000000000000000000000000000000000');
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Parse the input to a value that is compatible with the internal _value
     */
    EvmAddress.parse = function (address) {
        if (!(0, address_1.isAddress)(address)) {
            throw new core_1.MoralisCoreError({
                code: core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: 'Invalid address provided',
            });
        }
        return (0, address_1.getAddress)(address);
    };
    Object.defineProperty(EvmAddress.prototype, "checksum", {
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmAddress.prototype, "lowercase", {
        get: function () {
            return this._value.toLowerCase();
        },
        enumerable: false,
        configurable: true
    });
    EvmAddress.equals = function (addressA, addressB) {
        return EvmAddress.create(addressA)._value === EvmAddress.create(addressB)._value;
    };
    EvmAddress.prototype.equals = function (address) {
        return EvmAddress.equals(this, address);
    };
    EvmAddress.prototype.format = function (_formatStyle) {
        var formatStyle = _formatStyle !== null && _formatStyle !== void 0 ? _formatStyle : this.config.get(EvmUtilsConfig_1.EvmUtilsConfig.formatEvmAddress);
        if (formatStyle === 'checksum') {
            return this.checksum;
        }
        if (formatStyle === 'lowercase') {
            return this.lowercase;
        }
        throw new core_1.MoralisCoreError({
            code: core_1.CoreErrorCode.INVALID_ARGUMENT,
            message: 'Cannot format address, invalid config.formatAddress',
        });
    };
    return EvmAddress;
}());
exports.EvmAddress = EvmAddress;
//# sourceMappingURL=EvmAddress.js.map