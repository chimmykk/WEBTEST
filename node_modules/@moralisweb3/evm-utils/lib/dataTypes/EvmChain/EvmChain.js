"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmChain = void 0;
var chaindata_1 = require("../../data/chaindata");
var EvmChainParser_1 = require("./EvmChainParser");
var core_1 = require("@moralisweb3/core");
var EvmUtilsConfig_1 = require("../../config/EvmUtilsConfig");
/**
 * The EvmChain class is a MoralisData that references to a EVM chain
 * A new instance can be created via `EvmChain.create(chain)`, where the provided chain can be a valid chain number (1),
 * hex-string ("0x1"), or any suppored ChainName
 */
var EvmChain = /** @class */ (function () {
    function EvmChain(value, config) {
        var _this = this;
        var _a;
        this.config = config;
        this._value = EvmChainParser_1.EvmChainParser.parse(value);
        this._chainlistData = (_a = chaindata_1.chainList.find(function (chainData) { return chainData.chainId === _this.decimal; })) !== null && _a !== void 0 ? _a : null;
    }
    EvmChain.create = function (chain, core) {
        if (chain instanceof EvmChain) {
            return chain;
        }
        var c = core || core_1.MoralisCoreProvider.getDefault();
        return new EvmChain(chain, c.config);
    };
    Object.defineProperty(EvmChain, "ETHEREUM", {
        get: function () {
            return EvmChain.create(1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "ROPSTEN", {
        get: function () {
            return EvmChain.create(3);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "RINKEBY", {
        get: function () {
            return EvmChain.create(4);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "GOERLI", {
        get: function () {
            return EvmChain.create(5);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "KOVAN", {
        get: function () {
            return EvmChain.create(42);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "POLYGON", {
        get: function () {
            return EvmChain.create(137);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "MUMBAI", {
        get: function () {
            return EvmChain.create(80001);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "BSC", {
        get: function () {
            return EvmChain.create(56);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "BSC_TESTNET", {
        get: function () {
            return EvmChain.create(97);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "AVALANCHE", {
        get: function () {
            return EvmChain.create(43113);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "FUJI", {
        get: function () {
            return EvmChain.create(43113);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "FANTOM", {
        get: function () {
            return EvmChain.create(250);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "CRONOS", {
        get: function () {
            return EvmChain.create(25);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain, "CRONOS_TESTNET", {
        get: function () {
            return EvmChain.create(338);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Getter to return _chainlistData and throws an error if it is not defined
     */
    EvmChain.prototype._getChainlistData = function () {
        if (!this._chainlistData) {
            return null;
        }
        return this._chainlistData;
    };
    Object.defineProperty(EvmChain.prototype, "decimal", {
        /**
         * Returns the decimal representation of the chain
         */
        get: function () {
            return parseInt(this._value, 16);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain.prototype, "hex", {
        /**
         * Returns the hex-string representation of the chain
         */
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain.prototype, "apiHex", {
        /**
         * Validate and cast to api compatible hex
         */
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Compares if 2 chains are equal, based on the chainId
     */
    EvmChain.equals = function (chainA, chainB) {
        return EvmChain.create(chainA)._value === EvmChain.create(chainB)._value;
    };
    /**
     * Compares if the current chain is equal to the provided chain, based on the chainId
     */
    EvmChain.prototype.equals = function (chain) {
        return EvmChain.equals(this, chain);
    };
    /**
     * Formats the chain to the given output; in decimal value or as hex-string.
     * The default formatting can be set in MoralisConfig
     */
    EvmChain.prototype.format = function (_formatStyle) {
        var formatStyle = _formatStyle !== null && _formatStyle !== void 0 ? _formatStyle : this.config.get(EvmUtilsConfig_1.EvmUtilsConfig.formatEvmChainId);
        if (formatStyle === 'decimal') {
            return this.decimal;
        }
        if (formatStyle === 'hex') {
            return this.hex;
        }
        return (0, core_1.assertUnreachable)(formatStyle);
    };
    EvmChain.prototype.display = function () {
        return this.name ? "".concat(this.name, " (").concat(this.hex, ")") : this.hex;
    };
    Object.defineProperty(EvmChain.prototype, "name", {
        get: function () {
            var _a;
            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain.prototype, "currency", {
        get: function () {
            var _a;
            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.nativeCurrency;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain.prototype, "rpcUrls", {
        get: function () {
            var _a;
            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.rpc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmChain.prototype, "explorer", {
        get: function () {
            var _a;
            var explorers = (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.explorers;
            if (!explorers || explorers.length === 0) {
                return null;
            }
            return explorers[0];
        },
        enumerable: false,
        configurable: true
    });
    EvmChain.prototype.getExplorerPath = function (value) {
        var explorer = this.explorer;
        if (!explorer || explorer.standard !== 'EIP3091') {
            return null;
        }
        var url = explorer.url;
        // See https://eips.ethereum.org/EIPS/eip-3091 for paths
        if ('block' in value) {
            return "".concat(url, "/block/").concat(value.block);
        }
        if ('transaction' in value) {
            return "".concat(url, "/tx/").concat(value.transaction);
        }
        if ('account' in value) {
            return "".concat(url, "/address/").concat(value.account);
        }
        if ('erc20' in value) {
            return "".concat(url, "/token/").concat(value.erc20);
        }
        return null;
    };
    return EvmChain;
}());
exports.EvmChain = EvmChain;
//# sourceMappingURL=EvmChain.js.map