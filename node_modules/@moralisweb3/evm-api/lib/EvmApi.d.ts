import { ApiModule, MoralisCore } from '@moralisweb3/core';
import { Endpoints } from '@moralisweb3/api-utils';
export declare const BASE_URL = "https://deep-index.moralis.io/api/v2";
export declare class MoralisEvmApi extends ApiModule {
    static readonly moduleName = "evmApi";
    static create(core?: MoralisCore): MoralisEvmApi;
    private constructor();
    setup(): void;
    start(): void;
    readonly endpoints: Endpoints;
    readonly native: {
        getBlock: (params: import("./resolvers/native/getBlock").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            timestamp: string;
            number: string;
            hash: string;
            parent_hash: string;
            nonce: string;
            sha3_uncles: string;
            logs_bloom: string;
            transactions_root: string;
            state_root: string;
            receipts_root: string;
            miner: string;
            difficulty: string;
            total_difficulty: string;
            size: string;
            extra_data: string;
            gas_limit: string;
            gas_used: string;
            transaction_count: string;
            transactions: {
                hash: string;
                nonce: string;
                transaction_index: string;
                from_address: string;
                to_address: string;
                value: string;
                gas?: string | undefined;
                gas_price: string;
                input: string;
                receipt_cumulative_gas_used: string;
                receipt_gas_used: string;
                receipt_contract_address?: string | undefined;
                receipt_root?: string | undefined;
                receipt_status: string;
                block_timestamp: string;
                block_number: string;
                block_hash: string;
                logs: {
                    log_index: string;
                    transaction_hash: string;
                    transaction_index: string;
                    address: string;
                    data: string;
                    topic0: string;
                    topic1?: string | undefined;
                    topic2?: string | undefined;
                    topic3?: string | undefined;
                    block_timestamp: string;
                    block_number: string;
                    block_hash: string;
                }[];
            }[];
        }, import("@moralisweb3/evm-utils").EvmBlock, {
            number: string;
            difficulty: string;
            totalDifficulty: string;
            size: string;
            gasLimit: string;
            gasUsed: string;
            chain: string | number;
            miner: string;
            transactions: {
                to: string | undefined;
                from: string;
                nonce: string | undefined;
                gas: string | undefined;
                gasPrice: string;
                gasUsed: string;
                cumulativeGasUsed: string;
                blockNumber: string;
                value: string | undefined;
                chain: string | number;
                contractAddress: string | undefined;
                logs: {
                    address: string;
                    logIndex?: number | undefined;
                    transactionHash: string;
                    transactionIndex?: number | undefined;
                    data: string;
                    topics: string[];
                    blockHash: string;
                    blockNumber: number;
                    blockTimestamp?: string | undefined;
                }[];
                data?: string | undefined;
                hash: string;
                type?: number | undefined;
                index: number;
                blockHash: string;
                blockTimestamp: Date;
                receiptRoot?: string | undefined;
                receiptStatus?: number | undefined;
            }[];
            timestamp: Date;
            hash: string;
            parentHash: string;
            nonce: string;
            sha3Uncles: string;
            logsBloom: string;
            transactionsRoot: string;
            stateRoot: string;
            receiptsRoot: string;
            extraData: string;
            transactionCount: number;
        }, import("./resolvers/native/getBlock").Params>>;
        getContractEvents: (params: import("./resolvers/native/getContractEvents").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            total?: number | undefined;
            page?: number | undefined;
            page_size?: number | undefined;
            result?: {
                transaction_hash: string;
                address: string;
                block_timestamp: string;
                block_number: string;
                block_hash: string;
                data: {
                    from?: string | undefined;
                    to?: string | undefined;
                    value?: string | undefined;
                };
            }[] | undefined;
        }>, import("@moralisweb3/evm-utils").EvmEvent[], import("@moralisweb3/evm-utils").EvmEvent[], import("./resolvers/native/getContractEvents").Params>>;
        getDateToBlock: (params: import("./resolvers/native/getDateToBlock").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            date: string;
            block: number;
            timestamp: number;
        }, {
            date: Date;
            block: number;
            timestamp: number;
        }, {
            date: Date;
            block: number;
            timestamp: number;
        }, import("./resolvers/native/getDateToBlock").Params>>;
        getLogsByAddress: (params: import("./resolvers/native/getLogsByAddress").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            transaction_hash: string;
            address: string;
            block_timestamp: string;
            block_number: string;
            block_hash: string;
            data: string;
            topic0: string;
            topic1: string;
            topic2: string;
            topic3: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").EvmTransactionLog[], {
            address: string;
            logIndex?: number | undefined;
            transactionHash: string;
            transactionIndex?: number | undefined;
            data: string;
            topics: string[];
            blockHash: string;
            blockNumber: number;
            blockTimestamp?: string | undefined;
        }[], import("./resolvers/native/getLogsByAddress").Params>>;
        getNFTTransfersByBlock: (params: import("./resolvers/native/getNFTTransfersByBlock").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            from_address?: string | undefined;
            to_address: string;
            value?: string | undefined;
            amount?: string | undefined;
            contract_type: string;
            block_number: string;
            block_timestamp: string;
            block_hash: string;
            transaction_hash: string;
            transaction_type?: string | undefined;
            transaction_index?: string | undefined;
            log_index: number;
            operator?: string | undefined;
        }[]>, import("@moralisweb3/evm-utils").EvmNftTransfer[], {
            chain: string | number;
            blockNumber: string;
            fromAddress: string | undefined;
            toAddress: string;
            tokenAddress: string;
            value: string | undefined;
            operator: string | undefined;
            amount?: number | undefined;
            blockHash: string;
            blockTimestamp: Date;
            contractType: string;
            logIndex: number;
            tokenId: string;
            transactionHash: string;
            transactionIndex?: number | undefined;
            transactionType?: string | undefined;
        }[], import("./resolvers/native/getNFTTransfersByBlock").Params>>;
        getTransaction: (params: import("./resolvers/native/getTransaction").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            hash: string;
            nonce: string;
            transaction_index: string;
            from_address: string;
            to_address: string;
            value: string;
            gas?: string | undefined;
            gas_price: string;
            input: string;
            receipt_cumulative_gas_used: string;
            receipt_gas_used: string;
            receipt_contract_address?: string | undefined;
            receipt_root?: string | undefined;
            receipt_status: string;
            block_timestamp: string;
            block_number: string;
            block_hash: string;
            logs: {
                log_index: string;
                transaction_hash: string;
                transaction_index: string;
                address: string;
                data: string;
                topic0: string;
                topic1?: string | undefined;
                topic2?: string | undefined;
                topic3?: string | undefined;
                block_timestamp: string;
                block_number: string;
                block_hash: string;
            }[];
        }, import("@moralisweb3/evm-utils").EvmTransaction, {
            to: string | undefined;
            from: string;
            nonce: string | undefined;
            gas: string | undefined;
            gasPrice: string;
            gasUsed: string;
            cumulativeGasUsed: string;
            blockNumber: string;
            value: string | undefined;
            chain: string | number;
            contractAddress: string | undefined;
            logs: {
                address: string;
                logIndex?: number | undefined;
                transactionHash: string;
                transactionIndex?: number | undefined;
                data: string;
                topics: string[];
                blockHash: string;
                blockNumber: number;
                blockTimestamp?: string | undefined;
            }[];
            data?: string | undefined;
            hash: string;
            type?: number | undefined;
            index: number;
            blockHash: string;
            blockTimestamp: Date;
            receiptRoot?: string | undefined;
            receiptStatus?: number | undefined;
        }, import("./resolvers/native/getTransaction").Params>>;
        runContractFunction: (params: import("./resolvers/native/runContractFunction").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<string, string, string, import("./resolvers/native/runContractFunction").Params>>;
    };
    readonly account: {
        getNativeBalance: (params: import("./resolvers/account/getNativeBalance").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            balance: string;
        }, {
            balance: import("@moralisweb3/evm-utils").EvmNative;
        }, {
            balance: string;
        }, import("./resolvers/account/getNativeBalance").Params>>;
        getNFTs: (params: import("./resolvers/account/getNFTs").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            contract_type: string;
            owner_of: string;
            block_number: string;
            block_number_minted: string;
            token_uri?: string | undefined;
            metadata?: string | undefined;
            amount?: string | undefined;
            name: string;
            symbol: string;
            token_hash: string;
            last_token_uri_sync: string;
            last_metadata_sync: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").EvmNft[], {
            tokenAddress: string;
            chain: string | number;
            ownerOf: string | undefined;
            blockNumberMinted: string | undefined;
            blockNumber: string | undefined;
            tokenId: string | number;
            contractType: import("@moralisweb3/evm-utils").EvmNftContractType;
            tokenUri?: string | undefined;
            tokenHash?: string | undefined;
            metadata: import("@moralisweb3/core").MoralisDataObjectValue;
            name?: string | undefined;
            symbol?: string | undefined;
            lastMetadataSync?: Date | undefined;
            lastTokenUriSync?: Date | undefined;
            amount?: number | undefined;
        }[], import("./resolvers/account/getNFTs").Params>>;
        getNFTsForContract: (params: import("./resolvers/account/getNFTsForContract").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            contract_type: string;
            owner_of: string;
            block_number: string;
            block_number_minted: string;
            token_uri?: string | undefined;
            metadata?: string | undefined;
            amount?: string | undefined;
            name: string;
            symbol: string;
            token_hash: string;
            last_token_uri_sync: string;
            last_metadata_sync: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").EvmNft[], {
            tokenAddress: string;
            chain: string | number;
            ownerOf: string | undefined;
            blockNumberMinted: string | undefined;
            blockNumber: string | undefined;
            tokenId: string | number;
            contractType: import("@moralisweb3/evm-utils").EvmNftContractType;
            tokenUri?: string | undefined;
            tokenHash?: string | undefined;
            metadata: import("@moralisweb3/core").MoralisDataObjectValue;
            name?: string | undefined;
            symbol?: string | undefined;
            lastMetadataSync?: Date | undefined;
            lastTokenUriSync?: Date | undefined;
            amount?: number | undefined;
        }[], import("./resolvers/account/getNFTsForContract").Params>>;
        getNFTTransfers: (params: import("./resolvers/account/getNFTTransfers").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            from_address?: string | undefined;
            to_address: string;
            value?: string | undefined;
            amount?: string | undefined;
            contract_type: string;
            block_number: string;
            block_timestamp: string;
            block_hash: string;
            transaction_hash: string;
            transaction_type?: string | undefined;
            transaction_index?: string | undefined;
            log_index: number;
            operator?: string | undefined;
        }[]>, import("@moralisweb3/evm-utils").EvmNftTransfer[], {
            chain: string | number;
            blockNumber: string;
            fromAddress: string | undefined;
            toAddress: string;
            tokenAddress: string;
            value: string | undefined;
            operator: string | undefined;
            amount?: number | undefined;
            blockHash: string;
            blockTimestamp: Date;
            contractType: string;
            logIndex: number;
            tokenId: string;
            transactionHash: string;
            transactionIndex?: number | undefined;
            transactionType?: string | undefined;
        }[], import("./resolvers/account/getNFTTransfers").Params>>;
        getTokenBalances: (params: import("./resolvers/account/getTokenBalances").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            token_address: string;
            name: string;
            symbol: string;
            logo?: string | undefined;
            thumbnail?: string | undefined;
            decimals: number;
            balance: string;
        }[], import("@moralisweb3/evm-utils").Erc20Value[], ({
            value: string;
            token: {
                contractAddress: string;
                chain: string | number;
                decimals: number;
                name: string;
                symbol: string;
                logo?: string | null | undefined;
                logoHash?: string | null | undefined;
                thumbnail?: string | null | undefined;
            };
        } | {
            value: string;
            token?: undefined;
        })[], import("./resolvers/account/getTokenBalances").Params>>;
        getTokenTransfers: (params: import("./resolvers/account/getTokenTransfers").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            transaction_hash: string;
            address: string;
            block_timestamp: string;
            block_number: string;
            block_hash: string;
            to_address: string;
            from_address: string;
            value: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").Erc20Transfer[], {
            chain: string | number;
            address: string;
            blockNumber: string;
            toAddress: string;
            fromAddress: string;
            value: string;
            transactionHash: string;
            blockTimestamp: Date;
            blockHash: string;
        }[], import("./resolvers/account/getTokenTransfers").Params>>;
        getTransactions: (params: import("./resolvers/account/getTransactions").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            hash: string;
            nonce: string;
            transaction_index: string;
            from_address: string;
            to_address: string;
            value: string;
            gas: string;
            gas_price: string;
            input: string;
            receipt_cumulative_gas_used: string;
            receipt_gas_used: string;
            receipt_contract_address: string;
            receipt_root: string;
            receipt_status: string;
            block_timestamp: string;
            block_number: string;
            block_hash: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").EvmTransaction[], {
            to: string | undefined;
            from: string;
            nonce: string | undefined;
            gas: string | undefined;
            gasPrice: string;
            gasUsed: string;
            cumulativeGasUsed: string;
            blockNumber: string;
            value: string | undefined;
            chain: string | number;
            contractAddress: string | undefined;
            logs: {
                address: string;
                logIndex?: number | undefined;
                transactionHash: string;
                transactionIndex?: number | undefined;
                data: string;
                topics: string[];
                blockHash: string;
                blockNumber: number;
                blockTimestamp?: string | undefined;
            }[];
            data?: string | undefined;
            hash: string;
            type?: number | undefined;
            index: number;
            blockHash: string;
            blockTimestamp: Date;
            receiptRoot?: string | undefined;
            receiptStatus?: number | undefined;
        }[], import("./resolvers/account/getTransactions").Params>>;
    };
    readonly resolve: {
        resolveAddress: (params: import("./resolvers/resolve/resolveAddress").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            name: string;
        }, {
            name: string;
        }, {
            name: string;
        }, import("./resolvers/resolve/resolveAddress").Params>>;
        resolveDomain: (params: {
            currency?: "eth" | "0x1" | undefined;
        } & {
            domain: string;
        }) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            address: string;
        }, {
            address: import("@moralisweb3/evm-utils").EvmAddress;
        }, {
            address: string;
        }, {
            currency?: "eth" | "0x1" | undefined;
        } & {
            domain: string;
        }>>;
    };
    readonly defi: {
        getPairAddress: (params: import("./resolvers/defi/getPairAddress").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            token0?: {
                address?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                decimals?: string | undefined;
                logo?: string | undefined;
                logo_hash?: string | undefined;
                thumbnail?: string | undefined;
                block_number?: string | undefined;
                validated?: number | undefined;
                created_at?: string | undefined;
            } | undefined;
            token1?: {
                address?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                decimals?: string | undefined;
                logo?: string | undefined;
                logo_hash?: string | undefined;
                thumbnail?: string | undefined;
                block_number?: string | undefined;
                validated?: number | undefined;
                created_at?: string | undefined;
            } | undefined;
            pairAddress?: string | undefined;
        }, {
            token0: {
                token: import("@moralisweb3/evm-utils").Erc20Token;
                blockNumber: string | undefined;
                validated: number | undefined;
                createdAt: Date | undefined;
            };
            token1: {
                token: import("@moralisweb3/evm-utils").Erc20Token;
                blockNumber: string | undefined;
                validated: number | undefined;
                createdAt: Date | undefined;
            };
            pairAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        }, {
            token0: {
                token: {
                    contractAddress: string;
                    chain: string | number;
                    decimals: number;
                    name: string;
                    symbol: string;
                    logo?: string | null | undefined;
                    logoHash?: string | null | undefined;
                    thumbnail?: string | null | undefined;
                };
                blockNumber: string | undefined;
                validated: number | undefined;
                createdAt: Date | undefined;
            };
            token1: {
                token: {
                    contractAddress: string;
                    chain: string | number;
                    decimals: number;
                    name: string;
                    symbol: string;
                    logo?: string | null | undefined;
                    logoHash?: string | null | undefined;
                    thumbnail?: string | null | undefined;
                };
                blockNumber: string | undefined;
                validated: number | undefined;
                createdAt: Date | undefined;
            };
            pairAddress: string | undefined;
        }, import("./resolvers/defi/getPairAddress").Params>>;
        getPairReserves: (params: import("./resolvers/defi/getPairReserves").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            reserve0?: string | undefined;
            reserve1?: string | undefined;
        }, {
            reserve0?: string | undefined;
            reserve1?: string | undefined;
        }, {
            reserve0?: string | undefined;
            reserve1?: string | undefined;
        }, import("./resolvers/defi/getPairReserves").Params>>;
    };
    readonly token: {
        getAllTokenIds: (params: import("./resolvers/token/getAllTokenIds").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            owner_of?: string | undefined;
            token_hash?: string | undefined;
            block_number?: string | undefined;
            block_number_minted?: string | undefined;
            contract_type: string;
            token_uri?: string | undefined;
            metadata?: string | undefined;
            last_token_uri_sync?: string | undefined;
            last_metadata_sync?: string | undefined;
            amount?: string | undefined;
            name: string;
            symbol: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").EvmNft[], {
            tokenAddress: string;
            chain: string | number;
            ownerOf: string | undefined;
            blockNumberMinted: string | undefined;
            blockNumber: string | undefined;
            tokenId: string | number;
            contractType: import("@moralisweb3/evm-utils").EvmNftContractType;
            tokenUri?: string | undefined;
            tokenHash?: string | undefined;
            metadata: import("@moralisweb3/core").MoralisDataObjectValue;
            name?: string | undefined;
            symbol?: string | undefined;
            lastMetadataSync?: Date | undefined;
            lastTokenUriSync?: Date | undefined;
            amount?: number | undefined;
        }[], import("./resolvers/token/getAllTokenIds").Params>>;
        getContractNFTTransfers: (params: import("./resolvers/token/getContractNFTTransfers").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            from_address?: string | undefined;
            to_address: string;
            value?: string | undefined;
            amount?: string | undefined;
            contract_type: string;
            block_number: string;
            block_timestamp: string;
            block_hash: string;
            transaction_hash: string;
            transaction_type?: string | undefined;
            transaction_index?: string | undefined;
            log_index: number;
            operator?: string | undefined;
        }[]>, import("@moralisweb3/evm-utils").EvmNftTransfer[], {
            chain: string | number;
            blockNumber: string;
            fromAddress: string | undefined;
            toAddress: string;
            tokenAddress: string;
            value: string | undefined;
            operator: string | undefined;
            amount?: number | undefined;
            blockHash: string;
            blockTimestamp: Date;
            contractType: string;
            logIndex: number;
            tokenId: string;
            transactionHash: string;
            transactionIndex?: number | undefined;
            transactionType?: string | undefined;
        }[], import("./resolvers/token/getContractNFTTransfers").Params>>;
        getNFTLowestPrice: (params: import("./resolvers/token/getNFTLowestPrice").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            transaction_hash: string;
            transaction_index: string;
            token_ids: unknown[];
            seller_address: string;
            buyer_address: string;
            marketplace_address: string;
            price: string;
            block_timestamp: string;
            block_number: string;
            block_hash: string;
        } & {
            token_address: unknown;
        }, import("@moralisweb3/evm-utils").EvmNftTrade, {
            chain: string | number;
            sellerAddress: string;
            buyerAddress: string;
            marketplaceAddress: string;
            tokenAddress: string;
            priceTokenAddress: string | undefined;
            blockNumber: string;
            price: string;
            transactionHash: string;
            transactionIndex: number;
            tokenIds: string[];
            blockTimestamp: import("@moralisweb3/core").DateInput;
            blockHash: string;
        }, import("./resolvers/token/getNFTLowestPrice").Params>>;
        getNFTMetadata: (params: import("./resolvers/token/getNFTMetadata").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            token_address: string;
            name: string;
            synced_at?: string | undefined;
            symbol: string;
            contract_type: string;
        }, import("@moralisweb3/evm-utils").EvmNftMetadata, {
            chain: string | number;
            tokenAddress: string;
            name: string;
            symbol: string;
            contractType: import("@moralisweb3/evm-utils").EvmNftContractType | null;
            syncedAt: import("@moralisweb3/core").DateInput;
        }, import("./resolvers/token/getNFTMetadata").Params>>;
        getNFTOwners: (params: import("./resolvers/token/getNFTOwners").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            contract_type: string;
            owner_of: string;
            block_number: string;
            block_number_minted: string;
            token_uri?: string | undefined;
            metadata?: string | undefined;
            amount?: string | undefined;
            name: string;
            symbol: string;
            token_hash: string;
            last_token_uri_sync: string;
            last_metadata_sync: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").EvmNft[], {
            tokenAddress: string;
            chain: string | number;
            ownerOf: string | undefined;
            blockNumberMinted: string | undefined;
            blockNumber: string | undefined;
            tokenId: string | number;
            contractType: import("@moralisweb3/evm-utils").EvmNftContractType;
            tokenUri?: string | undefined;
            tokenHash?: string | undefined;
            metadata: import("@moralisweb3/core").MoralisDataObjectValue;
            name?: string | undefined;
            symbol?: string | undefined;
            lastMetadataSync?: Date | undefined;
            lastTokenUriSync?: Date | undefined;
            amount?: number | undefined;
        }[], import("./resolvers/token/getNFTOwners").Params>>;
        getNFTTrades: (params: import("./resolvers/token/getNFTTrades").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<({
            transaction_hash: string;
            transaction_index: string;
            token_ids: unknown[];
            seller_address: string;
            buyer_address: string;
            marketplace_address: string;
            price: string;
            block_timestamp: string;
            block_number: string;
            block_hash: string;
        } & {
            token_address: unknown;
        })[] | undefined>, import("@moralisweb3/evm-utils").EvmNftTrade[], {
            chain: string | number;
            sellerAddress: string;
            buyerAddress: string;
            marketplaceAddress: string;
            tokenAddress: string;
            priceTokenAddress: string | undefined;
            blockNumber: string;
            price: string;
            transactionHash: string;
            transactionIndex: number;
            tokenIds: string[];
            blockTimestamp: import("@moralisweb3/core").DateInput;
            blockHash: string;
        }[], import("./resolvers/token/getNFTTrades").Params>>;
        getNftTransfersFromToBlock: (params: import("./resolvers/token/getNftTransfersFromToBlock").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            from_address?: string | undefined;
            to_address: string;
            value?: string | undefined;
            amount?: string | undefined;
            contract_type: string;
            block_number: string;
            block_timestamp: string;
            block_hash: string;
            transaction_hash: string;
            transaction_type?: string | undefined;
            transaction_index?: string | undefined;
            log_index: number;
            operator?: string | undefined;
        }[]>, import("@moralisweb3/evm-utils").EvmNftTransfer[], {
            chain: string | number;
            blockNumber: string;
            fromAddress: string | undefined;
            toAddress: string;
            tokenAddress: string;
            value: string | undefined;
            operator: string | undefined;
            amount?: number | undefined;
            blockHash: string;
            blockTimestamp: Date;
            contractType: string;
            logIndex: number;
            tokenId: string;
            transactionHash: string;
            transactionIndex?: number | undefined;
            transactionType?: string | undefined;
        }[], import("./resolvers/token/getNftTransfersFromToBlock").Params>>;
        getTokenAddressTransfers: (params: import("./resolvers/token/getTokenAddressTransfers").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            transaction_hash: string;
            address: string;
            block_timestamp: string;
            block_number: string;
            block_hash: string;
            to_address: string;
            from_address: string;
            value: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").Erc20Transfer[], {
            chain: string | number;
            address: string;
            blockNumber: string;
            toAddress: string;
            fromAddress: string;
            value: string;
            transactionHash: string;
            blockTimestamp: Date;
            blockHash: string;
        }[], import("./resolvers/token/getTokenAddressTransfers").Params>>;
        getTokenAllowance: (params: import("./resolvers/token/getTokenAllowance").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            allowance: string;
        }, {
            allowance: import("@moralisweb3/core").BigNumber;
        }, {
            allowance: string;
        }, import("./resolvers/token/getTokenAllowance").Params>>;
        getTokenIdMetadata: (params: import("./resolvers/token/getTokenIdMetadata").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            token_address: string;
            token_id: string;
            owner_of?: string | undefined;
            token_hash?: string | undefined;
            block_number?: string | undefined;
            block_number_minted?: string | undefined;
            contract_type: string;
            token_uri?: string | undefined;
            metadata?: string | undefined;
            last_token_uri_sync?: string | undefined;
            last_metadata_sync?: string | undefined;
            amount?: string | undefined;
            name: string;
            symbol: string;
        }, import("@moralisweb3/evm-utils").EvmNft, {
            tokenAddress: string;
            chain: string | number;
            ownerOf: string | undefined;
            blockNumberMinted: string | undefined;
            blockNumber: string | undefined;
            tokenId: string | number;
            contractType: import("@moralisweb3/evm-utils").EvmNftContractType;
            tokenUri?: string | undefined;
            tokenHash?: string | undefined;
            metadata: import("@moralisweb3/core").MoralisDataObjectValue;
            name?: string | undefined;
            symbol?: string | undefined;
            lastMetadataSync?: Date | undefined;
            lastTokenUriSync?: Date | undefined;
            amount?: number | undefined;
        }, import("./resolvers/token/getTokenIdMetadata").Params>>;
        getTokenIdOwners: (params: import("./resolvers/token/getTokenIdOwners").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            contract_type: string;
            owner_of: string;
            block_number: string;
            block_number_minted: string;
            token_uri?: string | undefined;
            metadata?: string | undefined;
            amount?: string | undefined;
            name: string;
            symbol: string;
            token_hash: string;
            last_token_uri_sync: string;
            last_metadata_sync: string;
        }[] | undefined>, import("@moralisweb3/evm-utils").EvmNft[], {
            tokenAddress: string;
            chain: string | number;
            ownerOf: string | undefined;
            blockNumberMinted: string | undefined;
            blockNumber: string | undefined;
            tokenId: string | number;
            contractType: import("@moralisweb3/evm-utils").EvmNftContractType;
            tokenUri?: string | undefined;
            tokenHash?: string | undefined;
            metadata: import("@moralisweb3/core").MoralisDataObjectValue;
            name?: string | undefined;
            symbol?: string | undefined;
            lastMetadataSync?: Date | undefined;
            lastTokenUriSync?: Date | undefined;
            amount?: number | undefined;
        }[], import("./resolvers/token/getTokenIdOwners").Params>>;
        getTokenMetadata: (params: import("./resolvers/token/getTokenMetadata").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            address: string;
            name: string;
            symbol: string;
            decimals: string;
            logo?: string | undefined;
            logo_hash?: string | undefined;
            thumbnail?: string | undefined;
            block_number?: string | undefined;
            validated?: string | undefined;
        }[], {
            token: import("@moralisweb3/evm-utils").Erc20Token;
            blockNumber: string | undefined;
            validated: string | undefined;
        }[], {
            token: {
                contractAddress: string;
                chain: string | number;
                decimals: number;
                name: string;
                symbol: string;
                logo?: string | null | undefined;
                logoHash?: string | null | undefined;
                thumbnail?: string | null | undefined;
            };
            blockNumber: string | undefined;
            validated: string | undefined;
        }[], import("./resolvers/token/getTokenMetadata").Params>>;
        getTokenMetadataBySymbol: (params: import("./resolvers/token/getTokenMetadataBySymbol").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            address: string;
            name: string;
            symbol: string;
            decimals: string;
            logo?: string | undefined;
            logo_hash?: string | undefined;
            thumbnail?: string | undefined;
            block_number?: string | undefined;
            validated?: string | undefined;
        }[], {
            token: import("@moralisweb3/evm-utils").Erc20Token;
            blockNumber: string | undefined;
            validated: string | undefined;
        }[], {
            token: {
                contractAddress: string;
                chain: string | number;
                decimals: number;
                name: string;
                symbol: string;
                logo?: string | null | undefined;
                logoHash?: string | null | undefined;
                thumbnail?: string | null | undefined;
            };
            blockNumber: string | undefined;
            validated: string | undefined;
        }[], import("./resolvers/token/getTokenMetadataBySymbol").Params>>;
        getTokenPrice: (params: {
            chain?: "eth" | "0x1" | "ropsten" | "0x3" | "rinkeby" | "0x4" | "goerli" | "0x5" | "kovan" | "0x2a" | "polygon" | "0x89" | "mumbai" | "0x13881" | "bsc" | "0x38" | "bsc testnet" | "0x61" | "avalanche" | "0xa86a" | "avalanche testnet" | "0xa869" | "fantom" | "0xfa" | "cronos" | "0x19" | "cronos testnet" | "0x152" | undefined;
            providerUrl?: string | undefined;
            exchange?: string | undefined;
            to_block?: number | undefined;
        } & {
            address: string;
        }) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            nativePrice?: {
                value: string;
                decimals: number;
                name: string;
                symbol: string;
            } | undefined;
            usdPrice: number;
            exchangeAddress?: string | undefined;
            exchangeName?: string | undefined;
        } & {
            symbol: unknown;
        }, {
            nativePrice: import("@moralisweb3/evm-utils").EvmNative | null;
            exchangeAddress: import("@moralisweb3/evm-utils").EvmAddress | null;
            usdPrice: number;
            exchangeName?: string | undefined;
            symbol: unknown;
        }, {
            exchangeAddress: string | null;
            nativePrice: string | null;
            usdPrice: number;
            exchangeName?: string | undefined;
            symbol: unknown;
        }, {
            chain?: "eth" | "0x1" | "ropsten" | "0x3" | "rinkeby" | "0x4" | "goerli" | "0x5" | "kovan" | "0x2a" | "polygon" | "0x89" | "mumbai" | "0x13881" | "bsc" | "0x38" | "bsc testnet" | "0x61" | "avalanche" | "0xa86a" | "avalanche testnet" | "0xa869" | "fantom" | "0xfa" | "cronos" | "0x19" | "cronos testnet" | "0x152" | undefined;
            providerUrl?: string | undefined;
            exchange?: string | undefined;
            to_block?: number | undefined;
        } & {
            address: string;
        }>>;
        getWalletTokenIdTransfers: (params: import("./resolvers/token/getWalletTokenIdTransfers").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_address: string;
            token_id: string;
            from_address?: string | undefined;
            to_address: string;
            value?: string | undefined;
            amount?: string | undefined;
            contract_type: string;
            block_number: string;
            block_timestamp: string;
            block_hash: string;
            transaction_hash: string;
            transaction_type?: string | undefined;
            transaction_index?: string | undefined;
            log_index: number;
            operator?: string | undefined;
        }[]>, import("@moralisweb3/evm-utils").EvmNftTransfer[], {
            chain: string | number;
            blockNumber: string;
            fromAddress: string | undefined;
            toAddress: string;
            tokenAddress: string;
            value: string | undefined;
            operator: string | undefined;
            amount?: number | undefined;
            blockHash: string;
            blockTimestamp: Date;
            contractType: string;
            logIndex: number;
            tokenId: string;
            transactionHash: string;
            transactionIndex?: number | undefined;
            transactionType?: string | undefined;
        }[], import("./resolvers/token/getWalletTokenIdTransfers").Params>>;
        reSyncMetadata: (params: import("./resolvers/token/reSyncMetadata").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            status: string;
        }, {
            status: string;
        }, {
            status: string;
        }, import("./resolvers/token/reSyncMetadata").Params>>;
        searchNFTs: (params: import("./resolvers/token/searchNFTs").Params) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
            token_id: string;
            token_address: string;
            token_uri: string;
            metadata: string;
            is_valid: number;
            syncing: number;
            frozen: number;
            resyncing: number;
            contract_type: string;
            token_hash: string;
            batch_id: string;
            metadata_name: string;
            metadata_description: string;
            metadata_attributes: string;
            block_number_minted: string;
            opensea_lookup?: {
                [key: string]: unknown;
            } | undefined;
            minter_address: string;
            transaction_minted: string;
            frozen_log_index?: {
                [key: string]: unknown;
            } | undefined;
            imported?: {
                [key: string]: unknown;
            } | undefined;
            last_token_uri_sync: string;
            last_metadata_sync: string;
            createdAt: string;
            updatedAt: string;
        }[] | undefined>, {
            token: import("@moralisweb3/evm-utils").EvmNft;
            tokenHash: string;
            blockNumberMinted: string;
            lastMetadataSync: Date | undefined;
            lastTokenUriSync: Date | undefined;
            batchId: string;
            frozen: number;
            frozenLogIndex: {
                [key: string]: unknown;
            } | undefined;
            imported: {
                [key: string]: unknown;
            } | undefined;
            isValid: number;
            openseaLookup: {
                [key: string]: unknown;
            } | undefined;
            resyncing: number;
            syncing: number;
            updatedAt: Date;
        }[], {
            token: {
                tokenAddress: string;
                chain: string | number;
                ownerOf: string | undefined;
                blockNumberMinted: string | undefined;
                blockNumber: string | undefined;
                tokenId: string | number;
                contractType: import("@moralisweb3/evm-utils").EvmNftContractType;
                tokenUri?: string | undefined;
                tokenHash?: string | undefined;
                metadata: import("@moralisweb3/core").MoralisDataObjectValue;
                name?: string | undefined;
                symbol?: string | undefined;
                lastMetadataSync?: Date | undefined;
                lastTokenUriSync?: Date | undefined;
                amount?: number | undefined;
            };
            lastMetadataSync: string | undefined;
            lastTokenUriSync: string | undefined;
            updatedAt: string;
            tokenHash: string;
            blockNumberMinted: string;
            batchId: string;
            frozen: number;
            frozenLogIndex: {
                [key: string]: unknown;
            } | undefined;
            imported: {
                [key: string]: unknown;
            } | undefined;
            isValid: number;
            openseaLookup: {
                [key: string]: unknown;
            } | undefined;
            resyncing: number;
            syncing: number;
        }[], import("./resolvers/token/searchNFTs").Params>>;
        syncNFTContract: (params: import("./resolvers/token/syncNFTContract").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<unknown, {
            success: boolean;
        }, {
            success: boolean;
        }, import("./resolvers/token/syncNFTContract").Params>>;
    };
    private readonly _info;
    readonly info: {
        endpointWeights: () => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            endpoint: string;
            path: string;
            rateLimitWeight: string;
            price: string;
        }[], {
            endpoint: string;
            path: string;
            rateLimitWeight: string;
            price: string;
        }[], {
            endpoint: string;
            path: string;
            rateLimitWeight: string;
            price: string;
        }[], unknown>>;
        web3ApiVersion: () => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            version: string;
        }, {
            version: string;
        }, {
            version: string;
        }, unknown>>;
    };
    readonly storage: {
        uploadFolder: (params: import("./resolvers/storage/uploadFolder").Params) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
            path: string;
        }[], {
            path: string;
        }[], {
            path: string;
        }[], import("./resolvers/storage/uploadFolder").Params>>;
    };
}
//# sourceMappingURL=EvmApi.d.ts.map