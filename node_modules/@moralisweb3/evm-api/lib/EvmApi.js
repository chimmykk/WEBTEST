"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoralisEvmApi = exports.BASE_URL = void 0;
var core_1 = require("@moralisweb3/core");
var token_1 = require("./resolvers/token");
var defi_1 = require("./resolvers/defi");
var resolve_1 = require("./resolvers/resolve");
var account_1 = require("./resolvers/account");
var native_1 = require("./resolvers/native");
var info_1 = require("./resolvers/info");
var storage_1 = require("./resolvers/storage");
var EvmApiConfigSetup_1 = require("./config/EvmApiConfigSetup");
var api_utils_1 = require("@moralisweb3/api-utils");
exports.BASE_URL = 'https://deep-index.moralis.io/api/v2';
var MoralisEvmApi = /** @class */ (function (_super) {
    __extends(MoralisEvmApi, _super);
    function MoralisEvmApi(core) {
        var _this = _super.call(this, MoralisEvmApi.moduleName, core, exports.BASE_URL) || this;
        _this.endpoints = new api_utils_1.Endpoints(_this.core, exports.BASE_URL);
        _this.native = {
            getBlock: _this.endpoints.createFetcher(native_1.getBlock),
            getContractEvents: _this.endpoints.createPaginatedFetcher(native_1.getContractEvents),
            getDateToBlock: _this.endpoints.createFetcher(native_1.getDateToBlock),
            getLogsByAddress: _this.endpoints.createPaginatedFetcher(native_1.getLogsByAddress),
            getNFTTransfersByBlock: _this.endpoints.createPaginatedFetcher(native_1.getNFTTransfersByBlock),
            getTransaction: _this.endpoints.createFetcher(native_1.getTransaction),
            runContractFunction: _this.endpoints.createFetcher(native_1.runContractFunction),
        };
        _this.account = {
            getNativeBalance: _this.endpoints.createFetcher(account_1.getNativeBalance),
            getNFTs: _this.endpoints.createPaginatedFetcher(account_1.getNFTs),
            getNFTsForContract: _this.endpoints.createPaginatedFetcher(account_1.getNFTsForContract),
            getNFTTransfers: _this.endpoints.createPaginatedFetcher(account_1.getNFTTransfers),
            getTokenBalances: _this.endpoints.createFetcher(account_1.getTokenBalances),
            getTokenTransfers: _this.endpoints.createPaginatedFetcher(account_1.getTokenTransfers),
            getTransactions: _this.endpoints.createPaginatedFetcher(account_1.getTransactions),
        };
        _this.resolve = {
            resolveAddress: _this.endpoints.createFetcher(resolve_1.resolveAddress),
            resolveDomain: _this.endpoints.createFetcher(resolve_1.resolveDomain),
        };
        _this.defi = {
            getPairAddress: _this.endpoints.createFetcher(defi_1.getPairAddress),
            getPairReserves: _this.endpoints.createFetcher(defi_1.getPairReserves),
        };
        _this.token = {
            getAllTokenIds: _this.endpoints.createPaginatedFetcher(token_1.getAllTokenIds),
            getContractNFTTransfers: _this.endpoints.createPaginatedFetcher(token_1.getContractNFTTransfers),
            getNFTLowestPrice: _this.endpoints.createFetcher(token_1.getNFTLowestPrice),
            getNFTMetadata: _this.endpoints.createFetcher(token_1.getNFTMetadata),
            getNFTOwners: _this.endpoints.createPaginatedFetcher(token_1.getNFTOwners),
            getNFTTrades: _this.endpoints.createPaginatedFetcher(token_1.getNFTTrades),
            getNftTransfersFromToBlock: _this.endpoints.createPaginatedFetcher(token_1.getNftTransfersFromToBlock),
            getTokenAddressTransfers: _this.endpoints.createPaginatedFetcher(token_1.getTokenAddressTransfers),
            getTokenAllowance: _this.endpoints.createFetcher(token_1.getTokenAllowance),
            getTokenIdMetadata: _this.endpoints.createFetcher(token_1.getTokenIdMetadata),
            getTokenIdOwners: _this.endpoints.createPaginatedFetcher(token_1.getTokenIdOwners),
            getTokenMetadata: _this.endpoints.createFetcher(token_1.getTokenMetadata),
            getTokenMetadataBySymbol: _this.endpoints.createFetcher(token_1.getTokenMetadataBySymbol),
            getTokenPrice: _this.endpoints.createFetcher(token_1.getTokenPrice),
            getWalletTokenIdTransfers: _this.endpoints.createPaginatedFetcher(token_1.getWalletTokenIdTransfers),
            reSyncMetadata: _this.endpoints.createFetcher(token_1.reSyncMetadata),
            searchNFTs: _this.endpoints.createPaginatedFetcher(token_1.searchNFTs),
            syncNFTContract: _this.endpoints.createFetcher(token_1.syncNFTContract),
        };
        _this._info = {
            endpointWeights: _this.endpoints.createFetcher(info_1.endpointWeights),
            web3ApiVersion: _this.endpoints.createFetcher(info_1.web3ApiVersion),
        };
        _this.info = {
            endpointWeights: function () { return _this._info.endpointWeights({}); },
            web3ApiVersion: function () { return _this._info.web3ApiVersion({}); },
        };
        _this.storage = {
            uploadFolder: _this.endpoints.createFetcher(storage_1.uploadFolder),
        };
        return _this;
    }
    MoralisEvmApi.create = function (core) {
        return new MoralisEvmApi(core !== null && core !== void 0 ? core : core_1.MoralisCoreProvider.getDefault());
    };
    MoralisEvmApi.prototype.setup = function () {
        EvmApiConfigSetup_1.EvmApiConfigSetup.register(this.core.config);
    };
    MoralisEvmApi.prototype.start = function () {
        // Nothing
    };
    MoralisEvmApi.moduleName = 'evmApi';
    return MoralisEvmApi;
}(core_1.ApiModule));
exports.MoralisEvmApi = MoralisEvmApi;
//# sourceMappingURL=EvmApi.js.map