"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContractEvents = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmApi_1 = require("../../EvmApi");
var EvmChainResolver_1 = require("../EvmChainResolver");
var method = 'post';
var bodyParams = ['abi'];
exports.getContractEvents = (0, api_utils_1.createPaginatedEndpointFactory)(function (core) {
    return (0, api_utils_1.createPaginatedEndpoint)({
        name: 'getContractEvents',
        urlParams: ['address'],
        getUrl: function (params) { return "".concat(EvmApi_1.BASE_URL, "/").concat(params.address, "/events"); },
        //   TODO: remove PaginatedResponse when api squad make swagger update
        apiToResult: function (data, params) {
            var _a, _b;
            return (_b = ((_a = data.result.result) !== null && _a !== void 0 ? _a : [])) === null || _b === void 0 ? void 0 : _b.map(function (event) {
                return evm_utils_1.EvmEvent.create({
                    chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core),
                    address: params.address,
                    blockHash: event.block_hash,
                    blockNumber: event.block_number,
                    blockTimestamp: event.block_timestamp,
                    transactionHash: event.transaction_hash,
                    data: {
                        to: event.data.to,
                        from: event.data.from,
                        value: event.data.value,
                    },
                });
            });
        },
        resultToJson: function (data) { return data; },
        parseParams: function (params) { return ({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex,
            from_block: params.fromBlock,
            to_block: params.toBlock,
            from_date: params.toDate,
            to_date: params.toDate,
            providerUrl: params.providerUrl,
            topic: params.topic,
            limit: params.limit,
            offset: params.offset,
            subdomain: params.subdomain,
            address: evm_utils_1.EvmAddress.create(params.address, core).lowercase,
            abi: params.abi,
        }); },
        method: method,
        bodyParams: bodyParams,
        bodyType: api_utils_1.EndpointBodyType.BODY,
    });
});
//# sourceMappingURL=getContractEvents.js.map