"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTsForContract = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var EvmApi_1 = require("../../EvmApi");
var EvmChainResolver_1 = require("../EvmChainResolver");
exports.getNFTsForContract = (0, api_utils_1.createPaginatedEndpointFactory)(function (core) {
    return (0, api_utils_1.createPaginatedEndpoint)({
        name: 'getNFTsForContract',
        urlParams: ['address', 'tokenAddress'],
        getUrl: function (params) { return "".concat(EvmApi_1.BASE_URL, "/").concat(params.address, "/nft/").concat(params.tokenAddress); },
        apiToResult: function (data, params) {
            var _a, _b;
            return (_b = ((_a = data.result) !== null && _a !== void 0 ? _a : [])) === null || _b === void 0 ? void 0 : _b.map(function (nft) {
                return evm_utils_1.EvmNft.create({
                    chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core),
                    contractType: nft.contract_type,
                    tokenAddress: nft.token_address,
                    tokenId: nft.token_id,
                    tokenUri: nft.token_uri,
                    metadata: nft.metadata,
                    name: nft.name,
                    symbol: nft.symbol,
                    blockNumberMinted: nft.block_number_minted,
                    blockNumber: nft.block_number,
                    ownerOf: evm_utils_1.EvmAddress.create(nft.owner_of, core),
                    amount: nft.amount,
                    tokenHash: nft.token_hash,
                    lastMetadataSync: new Date(nft.last_metadata_sync),
                    lastTokenUriSync: new Date(nft.last_token_uri_sync),
                });
            });
        },
        resultToJson: function (data) { return data.map(function (nft) { return nft.toJSON(); }); },
        parseParams: function (params) { return (__assign(__assign({}, params), { chain: EvmChainResolver_1.EvmChainResolver.resolve(params.chain, core).apiHex, address: evm_utils_1.EvmAddress.create(params.address, core).lowercase, token_address: evm_utils_1.EvmAddress.create(params.tokenAddress, core).lowercase })); },
    });
});
//# sourceMappingURL=getNFTsForContract.js.map